// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int maxLen;
    field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = Array.new(1);
            let maxLen = 1;
        }
        else {
            let str = Array.new(maxLength);
            let maxLen = maxLength;
        }
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | ~(j < len)) {
            return null;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | ~(j < len)) {
            return;
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let str[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            return;
        }
        let str[len - 1] = null;
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val;
        var boolean isNeg;
        let val = 0;
        if (str[0] = 45) { // 45 = '-'
            let i = 1;
            let isNeg = true;
        }
        else {
            let i = 0;
            let isNeg = false;
        }
        while (i < len) {
            let val = (val * 10) + (str[i] - 48); // -48 give the actual number;
            let i = i + 1;
        }
        if (isNeg) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        if (val < 0) {
            do appendChar(45); // 45 = '-'
            let len = 1;
            do int2str(-val);
        }
        else{
            do int2str(val);
        }
        return;
    }
    /** helper function for setInt. */
    method void int2str(int val) {
        if (val < 10) {
            do appendChar(val+48);
        }
        else {
            do int2str(val/10);
            do appendChar((val - (10*(val/10))) + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
