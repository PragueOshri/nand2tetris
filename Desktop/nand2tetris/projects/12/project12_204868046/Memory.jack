// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram;
    static Array freeList;
    static int heapBase, heapEnd;
    static int next;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let heapEnd = 16384;
        let next = 1; // the next thing to be alloc in free.
        let freeList = heapBase;
        let freeList[0] = heapEnd - heapBase;
        let freeList[next] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array heap, block;
        let heap = freeList; //pointer to the freelist
        while (heap[0] < size) {
            if (heap[1] = 0) {
                do Sys.error(3); // 3 no place to store
            }
            else {
                let heap = heap[1]; // go to the next seg
            }
        }
        let block = heap + 2;
        if (heap[0] > (size + 2)) { // still have more space to store
            let block[size] = heap[0] - 2 - size;
            let block[size+1] = heap[1];
            let heap[1] = block + size;
        }
        let heap[0] = 0;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int nextSeg, curSeg;
        let curSeg = freeList;
        let nextSeg = ram[curSeg+1];
        while (~(nextSeg = 0)) {
            let curSeg = nextSeg;
            let nextSeg = ram[curSeg];
        }
        let ram[nextSeg] = o;
        return;
    }
}
