// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen, twoToThe;
    static int rows, cols, numWords;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i, curNum;
        let twoToThe = Array.new(16);
        let screen = 16384;
        let rows = 256;
        let cols = 512;
        let numWords = (cols / 16) * rows;
        let color = true;
        let i = 0;
        let curNum = 1;
        while (i < 16) {
            let twoToThe[i] = curNum;
            let curNum = curNum + curNum;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < numWords) {
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, val;
        if ((x < 0) | (x > (cols-1)) | (y < 0) | (y > (rows-1))) {
            do Sys.error(3); // out of grid
        }
        let addr = (32 * y) + (x / 16);
        let val = screen[addr];
        if (color) {
            let screen[addr] = val | twoToThe[(x & 15)];
        }
        else {
            let screen[addr] = val & ~(twoToThe[(x & 15)]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, tmp, diff;
        var boolean neg;
        if ((x1 < 0) | (x1 > (cols-1)) | (y1 < 0) | (y1 > (rows-1)) | (x2 < 0) | (x2 > (cols-1)) | (y2 < 0) | (y2 > (rows-1))){
            do Sys.error(4); // out of grid - line
        }
        if (x1 = x2) {
            do Screen.drawVline(x1, Math.min(y1, y2), Math.max(y1, y2));
            return;
        }
        if (y1 = y2) {
            do Screen.drawHline(y1, Math.min(x1, x2), Math.max(x1, x2));
            return;
        }
        // we want that dx and dy will be positive
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        if (dy < 0) {
            let neg = true;
        }
        else {
            let neg = false;
        }
        while ((a < dx) & (((~neg) & (b < dy)) | ((neg) & (b > dy)))) {
            do Screen.drawPixel(x1+a, y1+b);
            if (diff < 0) {
                let a = a + 1;
                if (neg) {
                    let diff = diff - dy;
                }
                else {
                    let diff = diff + dy;
                }
            }
            else {
                if (neg) {
                    let b = b - 1;
                }
                else {
                    let b = b + 1;
                }
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawVline(int x, int y1, int y2) {
        while (~(y2 < y1)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHline(int y, int x1, int x2) {
        var int addr1, addr2, modx1, modx2, tmpx1, tmpx2;
        if ((x2 - x1) < 15) {
            while (~(x1 > x2)) {
                do Screen.drawPixel(x1, y);
                let x1 = x1 + 1;
            }
            return;
        }
        let modx1 = x1 & 15;
        let addr1 = (32*y) + (x1/16);
        let modx2 = x2 & 15;
        let addr2 = (32*y) + (x2/16);
        if (~(modx1 = 0)) {
            let tmpx1 = x1 + (16 - modx1);
            while (~(x1 > tmpx1)) {
                do Screen.drawPixel(x1, tmpx1);
                let x1 = x1 + 1;
            }
            let addr1 = addr1 + 1;
        }
        if (~(modx2 = 0)) {
            let tmpx2 = x2 - modx2;
            while (~(tmpx2 > x2)) {
                do Screen.drawPixel(tmpx2, x2);
                let tmpx2 = tmpx2 + 1;
            }
            let addr2 = addr2 - 1;
        }
        while (~(addr1 > addr2)) {
            let screen[addr1] = color;
            let addr1 = addr1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y1 < y2) {
            do Screen.drawHline(y1, x1, x2);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, rsq, dysq, root;
        if ((r > 182) | ~(r > 0)) {
            return;
        }
        let dy = -r;
        let rsq = r*r;
        let dysq = dy*dy;
        while (~(dy > r)) {
            let root = Math.sqrt(rsq-dysq);
            do Screen.drawHline((y+dy), (x-root), (x+root));
            let dy = dy + 1;
        }
        return;
    }
}
