// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen, twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i, curNum;
        let twoToThe = Array.new(16);
        let screen = 16384;
        let color = true;
        let i = 0;
        let curNum = 1;
        while (i < 16) {
            let twoToThe[i] = curNum;
            let curNum = curNum + curNum;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, mask;
        let addr = (32 * y) + (x / 16);
        let mask = twoToThe[x&15];
        if (color) {
            let screen[addr] = screen[addr] | mask;
        }
        else {
            let screen[addr] = screen[addr] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, tmp, diff;

        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        if (dy = 0) {
            do Screen.drawHLine(y, x1, x2);
        }
        else {
            if (dx = 0) {
                do Screen.drawVLine(x, y1, y2);
            }
            else {
                let diff = 0;
                if (y1 < y2) {
                    let a = 0;
                    let b = 0;
                    while(~(a > dx) & ~(b > dy)) {
                        do Screen.drawPixel(x+a, y+b);
                        if (diff > 0) {
                            let a = a + 1;
                            let diff = diff - dx;
                        }
                        else {
                            let b = b + 1;
                            let diff = diff + dy;
                        }
                    }
                }
                else {
                    while(~(a > dx) & ~(b < dy)) {
                        do Screen.drawPixel(x+a, y-b);
                        if (diff > 0) {
                            let a = a + 1;
                            let diff = diff - dx;
                        }
                        else {
                            let b = b + 1;
                            let diff = diff - dy;
                        }
                    }
                }
            }
        }
        return;
    }

    function void drawLine_(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, tmp, diff;
        var boolean b1, b2, b3, b4;
    /*
        do Output.printInt(x1);
        do Output.printString("= x1");
        do Output.println();
        do Output.printInt(y1);
        do Output.printString("= y1");
        do Output.println();
        do Output.printInt(x2);
        do Output.printString("= x2");
        do Output.println();
        do Output.printInt(y2);
        do Output.printString("= y2");
        do Output.println();
    */

        let b1 = false;
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        if (dy = 0) {
            do Screen.drawHLine(y, x1, x2);
        }
        else {
            if (dx = 0) {
                do Screen.drawVLine(x, y1, y2);
            }
            else {
                let diff = 0;
                if (y1 < y2) {
                    let b1 = true;
                    while(~(a > dx) & ~(b > dy)) {
                        if (b1) {
                            let b1 = false;
                            do Output.printString("in while1");
                            do Output.printInt(x1+a);
                            do Output.printString("= x1+a");
                            do Output.println();
                            do Output.printInt(y1+b);
                            do Output.printString("= y1+b");
                            do Output.println();
                            do Screen.drawPixel(x1+a, y1+b);
                            while (true) {
                            }
                        }
                        do Screen.drawPixel(x1+a, y1+b);
                        if (diff > 0) {
                            let a = a + 1;
                            let diff = diff - dx;
                        }
                        else {
                            let b = b + 1;
                            let diff = diff + dy;
                        }
                    }
                }
                else {
                    do Output.printString("going to call in while2");
                    do Output.println();
                    let b2 = true;
                    //let dy = -dy;
                    while (~(a > dx) & ~(b < dy)) {

                        if (b2) {
                            let b2 = false;
                            do Output.printString("in while2");
                            do Output.println();
                            do Output.printInt(x1+a);
                            do Output.printString("= x1+a");
                            do Output.println();
                            do Output.printInt(y1+b);
                            do Output.printString("= y1+b");
                            do Output.println();
                            do Screen.drawPixel(x1+a, y1+b);
                        }

                        do Screen.drawPixel(x1+a, y1+b);
                        if (diff < 0) {
                            let a = a + 1;
                            let diff = diff + dy;
                        }
                        else {
                            let b = b + 1;
                            let diff = diff - dx;
                        }
                    }
                }
            }
        }
        return;
   }

    function void drawHLine(int y, int x1, int x2){
        var int tmp;
        if(x1 > x2){
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }
        while(~(x2 < x1)){
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawVLine(int x, int y1, int y2){
        var int tmp;
        if(y1 > y2){
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        while(~(y2 < y1)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)) {
            do Screen.drawHLine(y1, x1, x2);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        var int r_squared;
        let dy = -r;
        let r_squared = r*r;
        while(~(dy > r)) {
            let dx = Math.sqrt(r_squared-(dy*dy));
            do Screen.drawHLine(y+dy, x-dx, x+dx);
            let dy = dy + 1;
        }
        return;
    }
}
