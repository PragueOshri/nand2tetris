// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, curNum;
        let twoToThe = Array.new(16);
        let i = 0;
        let curNum = 1;
        while (i < 16) {
            let twoToThe[i] = curNum;
            let curNum = curNum + curNum;
            let i = i + 1;
        }
        return;
    }

    /** Return true the bit-index of the x-input is 1. */
    function boolean bit(int x, int index) {
        return ~((x & twoToThe[index]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int result;
        let result = x;
        if(x<0) {
            let result = -x;
        }
        return result;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i<16) {
            if(Math.bit(y,i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result, q;
        var boolean notToNeg;
        if (y=0) {
            do Sys.error(1); // 1 Division by zero
        }
        let notToNeg = ((x<0) = (y<0));
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (y>x){
            return 0;
        }
        let q = Math.divide(x, y+y);
        if ((x-(2*q*y)) < y) {
            let result = q+q;
        }
        else{
            let result = q+q+1;
        }
        if (notToNeg){
            return result;
        }
        return -result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, tmp, tmpSq;
        let y = 0;
        let j = 7;
        if (x < 0) {
            do Sys.error(2); // 2 Math.sqrt with negative number
        }
        while (~(j<0)) {
            let tmp = y + twoToThe[j];
            let tmpSq = tmp * tmp;
            if (~(tmpSq>x) & (tmpSq>0)) {
                let y = tmp;
            }
            let j = j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int result;
        let result = b;
        if (a>b){
            let result = a;
        }
        return result;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int result;
        let result = a;
        if (a>b){
            let result = b;
        }
        return result;
    }
}
