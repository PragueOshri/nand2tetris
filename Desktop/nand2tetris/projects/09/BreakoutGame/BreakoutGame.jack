class BreakoutGame {

    static BreakoutGame instance;
    field Paddle paddle;
    field Ball ball;

    field int wall; // the current wall the ball is bouncing off of.
    field int lastWall; // the last wall that the ball bounced off of.
    field int brick_level;
    field boolean exit; // true when the game is over
    field int score; // the current score
    field int numHits;
    field boolean endGame;

    /** Constructs a new Pong game. */
    constructor BreakoutGame new() {
        do Screen.clearScreen();
        let paddle = Paddle.new(230,229, 50, 7);
        let ball = Ball.new(253, 222, 0, 511, 0, 229);
        do ball.setDestination(400,0);
        do Screen.drawRectangle(0, 238, 511, 240);
        do Output.moveCursor(22, 0);
        do Output.printString("Score: 0");

        let exit = false;
        let score = 0;
        let wall = 0;
        let lastWall = 0;
        let brick_level = 0;
        let numHits = 0;
        let endGame = false;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do paddle.dispose();
        do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Breakout game, and stores it. */
    function void newInstance() {
        let instance = BreakoutGame.new();
        return;
    }

    /** Returns the single instance of this Breakout game. */
    function BreakoutGame getInstance() {
        return instance;
    }

    /** Starts the game, and andles inputs from the user that control
     * the bat's movement direction. */
    method void run() {
        var char key;

        while ((~exit) & (~endGame)) {
            // waits for the key to be pressed
            while ((key = 0) & ((~exit) & (~endGame))) {
                let key = Keyboard.keyPressed();
                do paddle.move();
                do moveBall();
                do Sys.wait(50);
            }

            if (key = 130) { do paddle.setDirection(1); }
            else {
                if (key = 132) { do paddle.setDirection(2); }
                else {
                    if (key = 140) { let exit = true; }
                }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & ((~exit) & (~endGame))) {
                let key = Keyboard.keyPressed();
                do paddle.move();
                do moveBall();
                do Sys.wait(50);
            }
        }
        if (exit) {
            do Output.moveCursor(10, 27);
            do Output.printString("Game Over");
            let endGame = true;
        }


        if (endGame & (~exit)) {
            do Output.moveCursor(10, 27);
            do Output.printString("congratulations !");
        }
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounced off a brick, dispose brick, finds its new direction.
     * If the ball bounces off the bat, increases the score by one.
     */
    method void moveBall() {
        var int bouncingDirection, paddleLeft, paddleRight, ballLeft, ballRight;

        let wall = ball.move();
        let numHits = ball.getNumOfHits();
        if (numHits = 15) { let endGame = true; }
        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            let paddleLeft = paddle.getLeft();
            let paddleRight = paddle.getRight();
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();

            if (wall = 4) {
                let exit = (paddleLeft > ballRight) | (paddleRight < ballLeft);
                if (~exit) {
                    if (ballRight < (paddleLeft + 10)) {
                        let bouncingDirection = -1;
                    }
                    else {
                        if (ballLeft > (paddleRight - 10)) {
                            let bouncingDirection = 1;
                        }
                    }
                    let score = score + 1;
                    do Output.moveCursor(22, 7);
                    do Output.printInt(score);
                }
            }
            do ball.bounce(bouncingDirection);
        }
        return;
    }
}
